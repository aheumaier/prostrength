# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `cocoon` gem.
# Please instead update this file by running `bin/tapioca gem cocoon`.

# source://cocoon//lib/cocoon/view_helpers.rb#1
module Cocoon; end

# source://cocoon//lib/cocoon.rb#4
class Cocoon::Engine < ::Rails::Engine
  class << self
    # source://activesupport/7.0.6/lib/active_support/callbacks.rb#68
    def __callbacks; end
  end
end

# source://cocoon//lib/cocoon/view_helpers.rb#2
module Cocoon::ViewHelpers
  # creates new association object with its conditions, like
  # `` has_many :admin_comments, class_name: "Comment", conditions: { author: "Admin" }
  # will create new Comment with author "Admin"
  #
  # source://cocoon//lib/cocoon/view_helpers.rb#111
  def create_object(f, association, force_non_association_create = T.unsafe(nil)); end

  # source://cocoon//lib/cocoon/view_helpers.rb#117
  def get_partial_path(partial, association); end

  # shows a link that will allow to dynamically add a new associated object.
  #
  # - *name* :         the text to show in the link
  # - *f* :            the form this should come in (the formtastic form)
  # - *association* :  the associated objects, e.g. :tasks, this should be the name of the <tt>has_many</tt> relation.
  # - *html_options*:  html options to be passed to <tt>link_to</tt> (see <tt>link_to</tt>)
  #          - *:render_options* : options passed to `simple_fields_for, semantic_fields_for or fields_for`
  #              - *:locals*     : the locals hash in the :render_options is handed to the partial
  #          - *:partial*        : explicitly override the default partial name
  #          - *:wrap_object*    : a proc that will allow to wrap your object, especially suited when using
  #                                decorators, or if you want special initialisation
  #          - *:form_name*      : the parameter for the form in the nested form partial. Default `f`.
  #          - *:count*          : Count of how many objects will be added on a single click. Default `1`.
  # - *&block*:        see <tt>link_to</tt>
  #
  # source://cocoon//lib/cocoon/view_helpers.rb#72
  def link_to_add_association(*args, &block); end

  # this will show a link to remove the current association. This should be placed inside the partial.
  # either you give
  # - *name* : the text of the link
  # - *f* : the form this link should be placed in
  # - *html_options*:  html options to be passed to link_to (see <tt>link_to</tt>)
  #
  # or you use the form without *name* with a *&block*
  # - *f* : the form this link should be placed in
  # - *html_options*:  html options to be passed to link_to (see <tt>link_to</tt>)
  # - *&block*:        the output of the block will be show in the link, see <tt>link_to</tt>
  #
  # source://cocoon//lib/cocoon/view_helpers.rb#16
  def link_to_remove_association(*args, &block); end

  # source://cocoon//lib/cocoon/view_helpers.rb#45
  def render_association(association, f, new_object, form_name, received_render_options = T.unsafe(nil), custom_partial = T.unsafe(nil)); end

  private

  # source://cocoon//lib/cocoon/view_helpers.rb#129
  def create_object_on_association(f, association, instance, force_non_association_create); end

  # source://cocoon//lib/cocoon/view_helpers.rb#123
  def create_object_on_non_association(f, association); end

  # source://cocoon//lib/cocoon/view_helpers.rb#150
  def create_object_with_conditions(instance); end
end
